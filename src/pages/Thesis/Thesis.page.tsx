import m from 'mithril';
import { Mtx, mtx } from 'mtx';

import {
  Typography,
  Link,
  Divider,
  List,
  ListItem,
  Quote
} from '../../components';
import { Page, PageHeader, PageSection } from '../../modules';

export class ThesisPage extends Mtx {
  view() {
    return (
      <Page content lastUpdated="April 22, 2021">
        <PageHeader
          src="/assets/images/thesis@2x.png"
          type="Thesis"
          title="Meaningful Interaction in Narrative-driven Games"
          date="Januari 6th, 2020 - August 27th, 2020"
        />
        <Typography paragraph>
          The way stories are told within narrative-driven games is inherently flawed. The past few years the industry has seen a surge of so-called "cinematic games" which primarily focus on telling a story using techniques commonly found in cinema. We (<Link underline href="https://linkedin.com/in/danilovandenbeemt">Danilo van den Beemt</Link> and David Wolters) believe that games have the ability to tell stories in a way no other medium can; by means of interaction.
        </Typography>
        <Typography>
          Whilst Danilo focused on the research concerning the nature of interaction, I focused on applying both his and my own research in the shape of a game. A Dutch version of Danilo's research can be found on our website, <Link underline href="https://ludumstercore.com/">ludumstercore.com</Link>.
        </Typography>
        <PageSection title="Context" />
        <Quote
          title="Interaction is a kind of action that occurs as two or more objects have an effect upon one other."
          source="Interaction - Wikipedia"
          href="https://en.wikipedia.org/wiki/Interaction"
        />
        <Typography paragraph>
          Within the context of our thesis, the objects described are the user (the person playing the game) and a computer. Computers have the unique ability to receive, process and respond to information from the user. The fidelity and speed of the interaction is what we define as the quality of interaction.
        </Typography>
        <Typography paragraph>
          Game designer <Link href="https://en.wikipedia.org/wiki/Chris_Crawford_(game_designer)" underline>Chris Crawford</Link> defines interaction as follows:
        </Typography>
        <Quote
          title="A cyclic process between two or more active agents in which each agent alternately listens, thinks and speaksâ€”a conversation of sorts."
          source="Chris Crawford"
          href="https://en.wikipedia.org/wiki/Chris_Crawford_(game_designer)"
        />
        <Typography paragraph>
          Listening, speaking and thinking are metaphors. A computer (generally) isn't capable of listening, speaking nor thinking in the way humans do. A computer "listens" to user input, "thinks" by using predefined algorithms and "speaks" by using its peripherals, such as the screen or speakers.
        </Typography>
        <Typography paragraph>
          A conversation where one party doesn't listen, speak or thinks isn't a conversation. The general quality of the interaction between the two agents depends on the fidelity (and quality) of every individual step. What exactly the threshold is for a quality conversation is something that Danilo covers in his research, which can be found on our website, <Link underline href="https://ludumstercore.com/">ludumstercore.com</Link>.
        </Typography>
        <PageSection title="Game" />
        <img
          src="/assets/images/thesis-gameplay.png"
          alt="ITFE gameplay footage"
        />
        <Typography paragraph>
          To prove that our research was applicable in practice, I developed game that applied the insights obtained during our research. The game, called ITFE, is playable in both <Link href="https://ludumstercore.com/game" underline>the browser</Link> and <Link href="https://drive.google.com/file/d/1VA29y7w1NmeKmoxb537ruFurPIEId4ZO/view" underline>free to download for Windows</Link>.
        </Typography>
        <Typography>
          The game was made in <Link underline href="https://tic80.com/">TIC-80</Link> and written in JavaScript.
        </Typography>
        <PageSection title="Goal" />
        <Typography paragraph>
          ITFE is a top-down turn-based tactical RPG, comparable to <Link href="https://subsetgames.com/itb.html" underline>Into the Breach</Link> or chess. The player uses a collection of characters to defeat the computer.
        </Typography>
        <Typography paragraph>
          To make sure the theory was applied correctly, the following criteria were created:
        </Typography>
        <List>
          <ListItem>
            The game does not feature a pre-written story. The story gets generated by means of user interaction.
          </ListItem>
          <ListItem>
            The game uses a collection of predefined personalities that interact with each other and the player to generate scenarios. For example, a character might walk away because they're fearful.
          </ListItem>
          <ListItem>
            The game uses a relationship system. Characters within the game can form relationships which influence the actions they will take. For example, a character might act differently when their partner dies.
          </ListItem>
          <ListItem>
            It's possible to undo actions, which is contextualized in the game. Undoing actions can have various consequences and characters will react differently to them.
          </ListItem>
        </List>
        <Typography>
          These criteria make sure the game being created fits the goal of our thesis; creating a story by means of interaction.
        </Typography>
        <PageSection title="Issues" />
        <List>
          <ListItem>
            <b>Tight coupling with game mechanics</b>
          </ListItem>
        </List>
        <Typography>
          Creating a high-quality interactive story is complicated. As described before, interaction depends on three key factors: <b>listening</b>, <b>speaking</b> and <b>thinking</b>. These three factors are tightly coupled to the game mechanics, meaning that the overall quality of the story is dependent on the overall quality of the game itself. This makes sense, of course. A game that's not fun to play will most likely not tell a good <i>interactive</i> story either.
        </Typography>
        <List>
          <ListItem>
            <b>Lack of narrative context</b>
          </ListItem>
        </List>
        <Typography>
          As per criteria, ITFE does not feature a pre-written story. The theory states, after all, that interactivity on itself should be more than capable of creating an interesting story. However, in practice, that level of interactive quality is very hard to obtain, meaning events within the game don't really make sense without context.
        </Typography>
        <PageSection title="Conclusion" />
        <Typography>
          Interactive storytelling is very complex. It's something that's very time consuming and hard to get right. For a game to feature a good interactive story it needs high-quality game mechanics that can be used by a procedural story system to create an interactive story.
        </Typography>
        <PageSection title="Reflection" />
        <Typography center paragraph component="h3" variant="h5">
          The difficulty of writing convincing AI
        </Typography>
        <Divider />
        <img
          src="/assets/images/thesis-ai.png"
          alt="ITFE pathfinding AI prototype"
        />
        <Typography paragraph>
          In theory it sounds simple. You take the board state, calculate the best move and perform said move. In practice, however, calculating the best move is incredibly difficult. Something that's quite natural for players to do is very hard to define in a programming language, I've found.
        </Typography>
        <Typography>
          For example, take pathfinding. A player roughly knows that it is advantageous to move your units closer to the enemy so you can attack them. For the AI, this process is far more involved. The AI algorithm looks roughly something like this:
        </Typography>
        <List>
          <ListItem>
            Collect all "valuable" tiles on the board (tiles containing buildings or player characters).
          </ListItem>
          <ListItem>
            For each tile, calculate the shortest path using the <Link href="https://en.wikipedia.org/wiki/A*_search_algorithm" underline>A* search algorithm</Link>.
          </ListItem>
          <ListItem>
            Of all found paths, select the shortest path.
          </ListItem>
          <ListItem>
            If this path is within range of attack, attack this tile.
          </ListItem>
          <ListItem>
            If not, check if the tile is within movement range.
          </ListItem>
          <ListItem>
            If not, select the next shortest path.
          </ListItem>
          <ListItem>
            Else move as close as possible to the destination tile.
          </ListItem>
          <ListItem>
            Again, check if destination is within range of attack and if so, attack the tile.
          </ListItem>
        </List>
        <Typography paragraph>
          Of course, this AI algorithm is very rudimentary; it does not care for it's own characters or the board state. Because of the simplicity of the AI, it's very difficult to create an interactive story.
        </Typography>
        <Divider />
        <Typography center paragraph component="h3" variant="h5">
          The importance of debugging
        </Typography>
        <Divider />
        <img
          src="https://user-images.githubusercontent.com/27073716/83950526-adbb1300-a82b-11ea-8aac-2f1dd1018078.png"
          alt="Debugging without stack traces"
        />
        <img
          src="https://user-images.githubusercontent.com/27073716/83952832-0692a780-a83c-11ea-8873-8a5905840234.png"
          alt="Debugging with stack traces"
        />
        <Typography paragraph>
          According to the <Link href="https://tic80.com/" underline>TIC-80 website</Link>, TIC-80 is "a fantasy computer for making, playing and sharing tiny games". Originally, I chose this engine to make sure the game wouldn't suffer from feature creep. As the game grew in complexity, however, this would become a burden.
        </Typography>
        <Typography paragraph>
          One of the biggest issues of working with TIC-80 was the lack of a good debugger. The combination of a small screen (240 x 136) and the lack of a stack trace made debugging a <i>very</i> difficult and time consuming process. To alleviate this problem, I <Link href="https://github.com/nesbox/TIC-80/issues/1113" underline>implemented</Link> a stack trace in TIC-80 and <Link href="https://twitter.com/ChronoDave/status/1288083439657328640" underline>debugged the engine in PowerShell</Link>.
        </Typography>
        <Divider />
        <Typography center paragraph component="h3" variant="h5">
          The importance of tooling
        </Typography>
        <Divider />
        <img
          src="https://camo.githubusercontent.com/963b2c030d9b3394688df2890fe048a5f55801bbbe22790edb52c79a64c5262d/68747470733a2f2f692e696d6775722e636f6d2f59706578436d342e706e67"
          alt="Tic-bundle logo"
        />
        <Typography paragraph>
          Another problem with TIC-80 is the lack of file bundling. As the game grew bigger in size, it become increasingly more difficult to maintain the code. To solve this problem, I wrote a bundler myself, called <Link href="https://github.com/chronoDave/tic-bundle" underline>tic-bundle</Link>.
        </Typography>
      </Page>
    );
  }
}

m.mount(document.body, ThesisPage);
